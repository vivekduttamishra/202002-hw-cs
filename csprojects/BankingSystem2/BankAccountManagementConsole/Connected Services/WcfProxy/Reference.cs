//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BankAccountManagementConsole.WcfProxy {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BankAccount", Namespace="http://schemas.datacontract.org/2004/07/ConceptArchitect.Banking")]
    [System.SerializableAttribute()]
    public partial class BankAccount : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double BalanceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int accountNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string passwordField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Balance {
            get {
                return this.BalanceField;
            }
            set {
                if ((this.BalanceField.Equals(value) != true)) {
                    this.BalanceField = value;
                    this.RaisePropertyChanged("Balance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int accountNumber {
            get {
                return this.accountNumberField;
            }
            set {
                if ((this.accountNumberField.Equals(value) != true)) {
                    this.accountNumberField = value;
                    this.RaisePropertyChanged("accountNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string password {
            get {
                return this.passwordField;
            }
            set {
                if ((object.ReferenceEquals(this.passwordField, value) != true)) {
                    this.passwordField = value;
                    this.RaisePropertyChanged("password");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WcfProxy.IBankingService")]
    public interface IBankingService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankingService/Authenticate", ReplyAction="http://tempuri.org/IBankingService/AuthenticateResponse")]
        void Authenticate(int accountNumber, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankingService/Authenticate", ReplyAction="http://tempuri.org/IBankingService/AuthenticateResponse")]
        System.Threading.Tasks.Task AuthenticateAsync(int accountNumber, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankingService/CloseAccount", ReplyAction="http://tempuri.org/IBankingService/CloseAccountResponse")]
        double CloseAccount(int accountNumber, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankingService/CloseAccount", ReplyAction="http://tempuri.org/IBankingService/CloseAccountResponse")]
        System.Threading.Tasks.Task<double> CloseAccountAsync(int accountNumber, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankingService/CreditInterest", ReplyAction="http://tempuri.org/IBankingService/CreditInterestResponse")]
        void CreditInterest();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankingService/CreditInterest", ReplyAction="http://tempuri.org/IBankingService/CreditInterestResponse")]
        System.Threading.Tasks.Task CreditInterestAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankingService/Deposit", ReplyAction="http://tempuri.org/IBankingService/DepositResponse")]
        void Deposit(int accountNumber, int amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankingService/Deposit", ReplyAction="http://tempuri.org/IBankingService/DepositResponse")]
        System.Threading.Tasks.Task DepositAsync(int accountNumber, int amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankingService/GetAccount", ReplyAction="http://tempuri.org/IBankingService/GetAccountResponse")]
        BankAccountManagementConsole.WcfProxy.BankAccount GetAccount(int accountNumber, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankingService/GetAccount", ReplyAction="http://tempuri.org/IBankingService/GetAccountResponse")]
        System.Threading.Tasks.Task<BankAccountManagementConsole.WcfProxy.BankAccount> GetAccountAsync(int accountNumber, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankingService/OpenAccount", ReplyAction="http://tempuri.org/IBankingService/OpenAccountResponse")]
        int OpenAccount(string type, string customerName, string password, int amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankingService/OpenAccount", ReplyAction="http://tempuri.org/IBankingService/OpenAccountResponse")]
        System.Threading.Tasks.Task<int> OpenAccountAsync(string type, string customerName, string password, int amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankingService/PrintAccountList", ReplyAction="http://tempuri.org/IBankingService/PrintAccountListResponse")]
        void PrintAccountList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankingService/PrintAccountList", ReplyAction="http://tempuri.org/IBankingService/PrintAccountListResponse")]
        System.Threading.Tasks.Task PrintAccountListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankingService/Transfer", ReplyAction="http://tempuri.org/IBankingService/TransferResponse")]
        void Transfer(int source, int amount, string password, int target);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankingService/Transfer", ReplyAction="http://tempuri.org/IBankingService/TransferResponse")]
        System.Threading.Tasks.Task TransferAsync(int source, int amount, string password, int target);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankingService/Withdraw", ReplyAction="http://tempuri.org/IBankingService/WithdrawResponse")]
        void Withdraw(int accountNumber, double amount, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankingService/Withdraw", ReplyAction="http://tempuri.org/IBankingService/WithdrawResponse")]
        System.Threading.Tasks.Task WithdrawAsync(int accountNumber, double amount, string password);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBankingServiceChannel : BankAccountManagementConsole.WcfProxy.IBankingService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BankingServiceClient : System.ServiceModel.ClientBase<BankAccountManagementConsole.WcfProxy.IBankingService>, BankAccountManagementConsole.WcfProxy.IBankingService {
        
        public BankingServiceClient() {
        }
        
        public BankingServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BankingServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BankingServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BankingServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void Authenticate(int accountNumber, string password) {
            base.Channel.Authenticate(accountNumber, password);
        }
        
        public System.Threading.Tasks.Task AuthenticateAsync(int accountNumber, string password) {
            return base.Channel.AuthenticateAsync(accountNumber, password);
        }
        
        public double CloseAccount(int accountNumber, string password) {
            return base.Channel.CloseAccount(accountNumber, password);
        }
        
        public System.Threading.Tasks.Task<double> CloseAccountAsync(int accountNumber, string password) {
            return base.Channel.CloseAccountAsync(accountNumber, password);
        }
        
        public void CreditInterest() {
            base.Channel.CreditInterest();
        }
        
        public System.Threading.Tasks.Task CreditInterestAsync() {
            return base.Channel.CreditInterestAsync();
        }
        
        public void Deposit(int accountNumber, int amount) {
            base.Channel.Deposit(accountNumber, amount);
        }
        
        public System.Threading.Tasks.Task DepositAsync(int accountNumber, int amount) {
            return base.Channel.DepositAsync(accountNumber, amount);
        }
        
        public BankAccountManagementConsole.WcfProxy.BankAccount GetAccount(int accountNumber, string password) {
            return base.Channel.GetAccount(accountNumber, password);
        }
        
        public System.Threading.Tasks.Task<BankAccountManagementConsole.WcfProxy.BankAccount> GetAccountAsync(int accountNumber, string password) {
            return base.Channel.GetAccountAsync(accountNumber, password);
        }
        
        public int OpenAccount(string type, string customerName, string password, int amount) {
            return base.Channel.OpenAccount(type, customerName, password, amount);
        }
        
        public System.Threading.Tasks.Task<int> OpenAccountAsync(string type, string customerName, string password, int amount) {
            return base.Channel.OpenAccountAsync(type, customerName, password, amount);
        }
        
        public void PrintAccountList() {
            base.Channel.PrintAccountList();
        }
        
        public System.Threading.Tasks.Task PrintAccountListAsync() {
            return base.Channel.PrintAccountListAsync();
        }
        
        public void Transfer(int source, int amount, string password, int target) {
            base.Channel.Transfer(source, amount, password, target);
        }
        
        public System.Threading.Tasks.Task TransferAsync(int source, int amount, string password, int target) {
            return base.Channel.TransferAsync(source, amount, password, target);
        }
        
        public void Withdraw(int accountNumber, double amount, string password) {
            base.Channel.Withdraw(accountNumber, amount, password);
        }
        
        public System.Threading.Tasks.Task WithdrawAsync(int accountNumber, double amount, string password) {
            return base.Channel.WithdrawAsync(accountNumber, amount, password);
        }
    }
}
